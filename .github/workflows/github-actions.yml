name: Exectester
run-name: ${{ github.actor }} triggered build ðŸš€

on:
    # Triggers on push to remote
    push:
        # For specific branches
        # branches: [main]
    # The workflow_dispatch event adds a button we can use to manually trigger
    workflow_dispatch:

jobs:
  Build-And-Test:
    # "runs-on" specifies the github hosted VM (not a container image- I think)
    runs-on: ubuntu-latest
    # To run inside of a container on the github hosted VM
    # container:
    #     image: golang:1.21.5-bullseye
    permissions:
        # Test publisher requires these perms
        checks: write
        pull-requests: write
        id-token: write
    steps:




###### TODO: IM HERE test OIDC auth
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0.4.0'
      with:
        token_format: 'access_token'
        workload_identity_provider: "${{ secrets.WORKLOAD_IDENTITY_PROVIDER_DEV }}"
        service_account: "${{ secrets.GSA_NAME_DEV }}"
    # TODO scripts have project and secret in them
    -
        name: testing
        run: |
            gcloud auth list


    -
        name: testing
        run: |
            gcloud secrets versions access 1 --secret="${{ secrets.TEST_01 }}" --project="${{ secrets.TEST_02 }}"





#       -
#         name: Echo Build Info
#         run: |
#             echo "github.event_name - ${{ github.event_name }}"
#             echo "runner.os - ${{ runner.os }}"
#             echo "github.ref - ${{ github.ref }}"
#             echo "github.repository - ${{ github.repository }}"
#             echo "github.workspace - ${{ github.workspace }}"
#             echo "job.status - ${{ job.status }}"
# 
#       -
#         name: Check out repo
#         uses: actions/checkout@v4
# 
#       ##################### BUILD SETUP #####################
#       # Using shared workflow to get a vanilla go env setup
#       # The actual builds run in containers created by dagger, but the dagger
#       # pipeline itself is written in golang so we need a minimal go installation
#       -
#         name: Setup Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: '>=1.20'
#       -
#         name: Install Dagger 
#         run: go get dagger.io/dagger@latest
#       # TODO: what is the CLI for??
#       # - name: Install Dagger CLI
#       #   run: cd /usr/local && { curl -L https://dl.dagger.io/dagger/install.sh | sh; cd -; }
# 
#       ##################### BUILD #####################
#       -
#         name: Build and Test
#         run: |
#             make
# 
#       ##################### REPORT #####################
#       -
#         name: Publish Test Results
#         uses: EnricoMi/publish-unit-test-result-action@v2
#         if: always()
#         with:
#           files: |
#             build/unit-tests.xml
# 